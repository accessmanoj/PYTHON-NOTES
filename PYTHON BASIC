What is Python?
Python is a popular programming language. It was created by Guido van Rossum, and released in 1991.

It is used for:

web development (server-side),
software development,
mathematics,
system scripting.
What can Python do?
Python can be used on a server to create web applications.
Python can be used alongside software to create workflows.
Python can connect to database systems. It can also read and modify files.
Python can be used to handle big data and perform complex mathematics.
Python can be used for rapid prototyping, or for production-ready software development.
Why Python?
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-oriented way or a functional way.
Good to know
The most recent major version of Python is Python 3, which we shall be using in this tutorial. However, Python 2, although not being updated with anything other than security updates, is still quite popular.
In this tutorial Python will be written in a text editor. It is possible to write Python in an Integrated Development Environment, such as Thonny, Pycharm, Netbeans or Eclipse which are particularly useful when managing larger collections of Python files.
Python Syntax compared to other programming languages
Python was designed for readability, and has some similarities to the English language with influence from mathematics.
Python uses new lines to complete a command, as opposed to other programming languages which often use semicolons or parentheses.
Python relies on indentation, using whitespace, to define scope; such as the scope of loops, functions and classes. Other programming languages often use curly-brackets for this purpose.




PYTHON CODE:

print("hello world")

Python Indentation
Indentation refers to the spaces at the beginning of a code line.
Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.
Python uses indentation to indicate a block of code.

if 5>2
   print("five is greater then two")
   
   
   PYTHON COMMENTS:
   Comments can be used to expain python code.
   Comments can be used to make the code more readable.
   Comments can be used to prevent execution when testing code.
   
   CREATING COMMENTS:
   # This is a comments.
   """ For multiline Comments"""
  
  PYTHON VARIABLE:
  Variables are containers for storing data values.
  Python has no command for declaring a variable.
  A variable is created the moments you first assign a value to it.
  EX.
  x=5
  y="john"
  print(x)
  print(y)
  
  CASTING:
  IF you want to specify the data type of a variable, this can be done with casting.
  EX.
  x=str(3) 
  y=int(3)
  z=float(3)
  
  GET THE TYPE.
  You can get the data type of variable with the type() function.
  EX.
  x=5
  y="john"
  
  
  SINGLE OR DOUBLE QUOTES.
  String variable can be declared either by using single or double quotes.
  EX.
  x="john"
  x='john'
  
  CASE SENSITIVE.
  Variable names are case-sensitive.
  
  VARIABLE NAMES.
  Must starts with letter or _.
  Cannot starts with Number
  Can only contain alph-numeric Character and underscores (A-z), (0-9) and _
  Case Sensitive (age, Age are different)
  
  EX.
myvar = "John"
my_var = "John"
_my_var = "John"
myVar = "John"
MYVAR = "John"
myvar2 = "John"

THREE CASES FOR MULTI WORDS VARIABLE NAMES.
Camel Case
  Each word, except the first, starts with a capital letter:
  myVariableName = "John"
 Pascal Case 
  Each word starts with a capital letter: 
  MyVariableName = "John" 
Snake Case 
  Each word is separated by an underscore character:
  my_variable_name = "John"
  
  PYTHON ALLOWS YOU TO ASSIGN VALUES TO MULTIPLE VARIABLES IN ONE LINE:
  EX.
  X,Y,Z = "ORANGE","BANANA","CHERRY"
  
  Note: Make sure the number of variables matches the number of values, or else you will get an error.

ONE VALUE TO MULTIPLE VARIABLES.
you can assign the same value to multiple variables in one line:
x = y = z = "Orange"

GLOBAL VARIABLES.
Variables that are created outside of a function are known as a global variable.
Global variable can be used by everyone, both inside of function and outside.
if you want to declare variable inside the function but you want to use it outside.
Global keyword is used.
EX:
x="awesome"
def myfunc():
  global x
  x="fantastic"
  print("python is "+ x)
myfunc()
print("python is " + x)

PYTHON DATATYPE:

Built-in Data Types

Text Type             :	str
Numeric Types         :	int, float, complex
Sequence Types        :	list, tuple, range
Mapping Type          :	dict
Set Types             :	set, frozenset
Boolean Type          :	bool
Binary Types          :	bytes, bytearray, memoryview
None Type             :	NoneType

Getting the Data Type

To get a data type of any variable called type function
SYNTAX: type().

Setting a Datatype:

x = "Hello World"                	            str	
x = 20	                                       int	
x = 20.5	                                       float	
x = 1j	                                       complex	
x = ["apple", "banana", "cherry"]	            list	
x = ("apple", "banana", "cherry")	            tuple	
x = range(6)	                                 range	
x = {"name" : "John", "age" : 36}	            dict	
x = {"apple", "banana", "cherry"}	            set	
x = frozenset({"apple", "banana", "cherry"})	   frozenset	
x = True	                                       bool	
x = b"Hello"	                                 bytes	
x = bytearray(5)	                              bytearray	
x = memoryview(bytes(5))	                     memoryview	
x = None	                                       NoneType

Setting the Specific Data Type:

x = str("Hello World")           	            str	
x = int(20)	                                    int	
x = float(20.5)                  	            float	
x = complex(1j)	                              complex	
x = list(("apple", "banana", "cherry"))	      list	
x = tuple(("apple", "banana", "cherry"))	      tuple	
x = range(6)	                                 range	
x = dict(name="John", age=36)	                  dict	
x = set(("apple", "banana", "cherry"))	         set	
x = frozenset(("apple", "banana", "cherry"))	   frozenset	
x = bool(5)	                                    bool	
x = bytes(5)	                                 bytes	
x = bytearray(5)	                              bytearray	
x = memoryview(bytes(5))	                     memoryview

VARIABLES:

(1). PYTHON NUMBERS:
int, float, complex
EX:
x = 12 (int) (whole number, positive or negative number, unlimited length)
x = 2.8 (float) (positive or negative number containing decimal values) 
x = 5j (complex) (complex are written with j as a imaginary part)

Note: You can also convert one type to another types.


